/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.api.tasks.testing.logging.TestExceptionFormat

plugins {
    id 'java'
    id 'com.diffplug.spotless' version '6.17.0'
    id 'org.springframework.boot' version '3.1.0'
    id 'com.google.cloud.tools.jib' version '3.3.2'
    id 'idea'
}

group = 'com.google.cloud.solutions'
version = '0.1.0-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

def floggerVersion = "0.7.4"
def springBootVersion = "3.1.0"
def protobufVersion = "3.22.3"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {

    // Commons library deps
    implementation "com.google.guava:guava:32.0.1-jre"
    implementation "com.google.code.gson:gson:2.10.1"

    // Logging framework
    implementation "com.google.flogger:flogger:${floggerVersion}"
    implementation "com.google.flogger:google-extensions:${floggerVersion}"
    runtimeOnly "com.google.flogger:flogger-system-backend:${floggerVersion}"

    // Google Cloud Service Client Libraries
    implementation "com.google.cloud:google-cloud-dlp:3.23.0"

    //Spring deps
    implementation ("org.springframework.boot:spring-boot-starter-web:${springBootVersion}") {
        exclude group: "org.yaml", module: "snakeyaml"
        exclude group: "org.springframework.boot", module: "spring-boot-starter-json"
    }

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"

    // Test Deps
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.9.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.9.2"
    testImplementation "com.google.truth:truth:1.1.3"
    testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"

    // proto json format
    testImplementation "com.google.protobuf:protobuf-java:${protobufVersion}"
    testImplementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    testImplementation "com.google.truth.extensions:truth-proto-extension:1.1.3"

}

jib {
    from {
        image = 'eclipse-temurin:17-jre'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

test {
    useJUnit()
    dependsOn cleanTest
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showStandardStreams = true
        exceptionFormat = TestExceptionFormat.FULL
    }
}

def licenseLines = new File("ApacheHeader").readLines()
def licenseJava = "/*\n" + licenseLines.collect(ln -> " *" + (ln.matches("^.+")? " " : "") + ln).join("\n") + "\n */\n\n"
def licenseWithHash = "#\n" + licenseLines.collect(ln -> "#" + (ln.matches("^.+")? " " : "") + ln).join("\n") + "\n#\n\n"
def licenseWithForwardSlashes = "//\n" + licenseLines.collect(ln -> "//" + (ln.matches("^.+")? " " : "") + ln).join("\n") + "\n//\n\n"

spotless {
    java {
        target "**/*.java"
        targetExclude "third_party/**"
        googleJavaFormat('1.15.0')
        removeUnusedImports()
        importOrder()
        trimTrailingWhitespace()
        endWithNewline()
        licenseHeader(licenseJava)
    }

    kotlin {
        target "**/*.kt"
        ktlint()
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
        licenseHeader(licenseJava)
    }

    freshmark {
        target '*.md'
        indentWithSpaces(2)
        trimTrailingWhitespace()
        endWithNewline()
    }

    format "proto", {
        target "**/*.proto"
        licenseHeader(licenseWithForwardSlashes, "syntax")
        indentWithSpaces(2)
        trimTrailingWhitespace()
        endWithNewline()
    }


    format "gradle", {
        target "**/*.gradle"
        indentWithSpaces(2)
        trimTrailingWhitespace()
        endWithNewline()
        licenseHeader(licenseJava, "(import|plugins|rootProject)")
    }

    format "misc", {
        target "**/.gitignore", "*.xml", "src/**/*.xml"
        indentWithSpaces(2)
        trimTrailingWhitespace()
        endWithNewline()
    }

    format "terraform", {
        target "**/*.tf", "**/*.tfvars"
        targetExclude ".terraform/*"
        licenseHeader(licenseWithHash, "#---")
        indentWithSpaces(2)
        trimTrailingWhitespace()
        endWithNewline()
    }
}
